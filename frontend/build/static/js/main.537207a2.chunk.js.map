{"version":3,"sources":["resources/ding.mp3","resources/waterdrop2.mp3","resources/computerError2.mp3","components/TradeTableButton.js","components/TradeTable.js","components/StalkMarketTable.js","components/YourInformation.js","components/YourStalkTable.js","components/StalkUtil.js","components/TradeMainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TradeTableButton","props","state","isLoading","actionType","trade","icon","onHandleClick","toggleLoading","bind","console","log","this","setState","buttonContent","Fragment","Button","Content","visible","hidden","Icon","name","self","animated","onClick","seller","turnipCode","buyer","Component","TradeTable","type","islanderSide","index","Table","Cell","style","width","verticalAlign","color","prevState","islands","length","previousIsland","Label","as","ribbon","href","description","dodoCodes","tag","turnipPrice","yourPlaces","maxQueue","queuedStr","trades","Divider","horizontal","Header","sectionIcon","sectionName","celled","striped","Row","HeaderCell","colSpan","createBody","statuses","queueIDs","StalkMarketTable","Body","map","createTradeRow","createActionButton","YourInformation","Input","defaultValue","visitorName","onChange","onInfoChanged","YourStalkTable","status","Segment","action","data","message","visitors","visitor","key","$id","place","JSON","stringify","timestamp","Date","toLocaleTimeString","island","panels","title","content","Accordion","exclusive","defaultActiveIndex","fluid","sellSide","buySide","reverse","isSkippableStatus","push","getStatusColor","getRibbonMessage","getStatusMessage","colspan","createAccordion","createStatusRows","StalkUtil","ms","Promise","resolve","setTimeout","TradeMainPage","cookies","Cookies","visitorIDs","failedTrades","get","yourTrades","turnipQueueIDs","handlePing","handleJoin","handleInfo","handleYourPlaces","handleVisitorID","handleReconnect","currentButtonElement","visitorID","ws","WebSocket","reject","onopen","event","send","onerror","onmessage","obj","parse","undefined","autoSave","side","success","mapping","yourPlace","onIsland","dodoCode","playSound","url","callback","fetch","then","response","json","sellerTurnipCode","buyerTurnipCode","callBack","sleepCount","seller_url","handleFetch","sleep","buyer_url","setTrades","getTrades","element","statues","handleQueue","sellerIsland","buyerIsland","rId","splice","audioEl","document","getElementsByClassName","play","res","ok","Error","catch","error","notify","getTradesServer","set","path","setInterval","autoPing","autoRefresh","target","value","Container","ref","alertSound","handleClick","className","src","dingMP3","errorMP3","waterdropMP3","App","Boolean","window","location","hostname","match","styleLink","createElement","rel","head","appendChild","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.537207a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ding.2d524655.mp3\";","module.exports = __webpack_public_path__ + \"static/media/waterdrop2.31a564d2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/computerError2.6583b7bd.mp3\";","import React, { Component } from \"react\";\nimport { Button, Icon } from \"semantic-ui-react\";\n\nclass TradeTableButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoading: true };\n    this.actionType = this.props.actionType;\n    this.trade = this.props.trade;\n    this.icon = this.props.icon;\n    this.onHandleClick = this.props.onHandleClick;\n    this.toggleLoading = this.toggleLoading.bind(this);\n  }\n\n  toggleLoading() {\n    console.log(\"Toggle Loading...\");\n    this.setState((state) => ({\n      isLoading: !state.isLoading,\n    }));\n  }\n\n  render() {\n    let buttonContent;\n    if (this.state.isLoading) {\n      buttonContent = (\n        <React.Fragment>\n          <Button.Content visible>{this.icon}</Button.Content>\n          <Button.Content hidden>{this.actionType}</Button.Content>\n        </React.Fragment>\n      );\n    } else {\n      buttonContent = (\n        <React.Fragment>\n          <Button.Content visible>\n            <Icon name=\"spinner\" />\n          </Button.Content>\n          <Button.Content hidden>Loading</Button.Content>\n        </React.Fragment>\n      );\n    }\n    let self = this;\n    return (\n      <Button\n        animated=\"vertical\"\n        onClick={function () {\n          self.onHandleClick(\n            self,\n            self.actionType,\n            self.trade.seller.turnipCode,\n            self.trade.buyer.turnipCode\n          );\n          self.toggleLoading();\n        }}\n      >\n        {buttonContent}\n      </Button>\n    );\n  }\n}\n\nexport default TradeTableButton;\n","import React, { Component } from \"react\";\nimport { Label, Table, Divider, Header } from \"semantic-ui-react\";\nimport TradeTableButton from \"./TradeTableButton\";\nclass TradeTable extends Component {\n  /* Component Rendering */\n  createActionButton(actionType, trade, icon) {\n    return (\n      <TradeTableButton\n        onHandleClick={this.props.onHandleClick}\n        actionType={actionType}\n        trade={trade}\n        icon={icon}\n      />\n    );\n  }\n\n  createTradeRow(type, islanderSide, index) {\n    if (!islanderSide) {\n      return (\n        <React.Fragment>\n          <Table.Cell style={{ width: 300 }} verticalAlign=\"top\">\n            No Information.\n          </Table.Cell>\n          <Table.Cell>--</Table.Cell>\n          <Table.Cell>--</Table.Cell>\n        </React.Fragment>\n      );\n    }\n    let color = \"white\";\n    if (\n      index !== -1 &&\n      this.prevState &&\n      this.prevState.islands.length > index\n    ) {\n      let previousIsland;\n      switch (type) {\n        case \"seller\":\n          previousIsland = this.prevState.islands[index].seller;\n          break;\n        case \"buyer\":\n          previousIsland = this.prevState.islands[index].buyer;\n          break;\n        default:\n          break;\n      }\n      if (previousIsland.turnipCode !== islanderSide.turnipCode) {\n        color = \"teal\";\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Table.Cell style={{ width: 300 }} verticalAlign=\"top\">\n          {/* <Transition.Group animation={\"flash\"} duration={1000} visible={true}> */}\n          <Label as=\"a\" color={color} ribbon>\n            <a\n              href={\"https://turnip.exchange/island/\" + islanderSide.turnipCode}\n            >\n              {islanderSide.name}\n            </a>\n          </Label>\n          {/* this will mess up the table: fix this */}\n          <span>{islanderSide.description}</span>\n          <span>\n            <br />\n            {this.props.dodoCodes &&\n            this.props.dodoCodes[islanderSide.turnipCode] ? (\n              <Label as=\"a\" color=\"green\">\n                {this.props.dodoCodes[islanderSide.turnipCode]}\n              </Label>\n            ) : (\n              \"\"\n            )}\n          </span>\n          {/* </Transition.Group> */}\n        </Table.Cell>\n        <Table.Cell>\n          <Label tag>${islanderSide.turnipPrice}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          {/* you should abstract below out and make it more specific to the said component */}\n          {this.props.yourPlaces &&\n          this.props.yourPlaces[islanderSide.turnipCode]\n            ? this.props.yourPlaces[islanderSide.turnipCode] +\n              \"/\" +\n              islanderSide.maxQueue\n            : islanderSide.queuedStr}\n        </Table.Cell>\n      </React.Fragment>\n    );\n  }\n\n  createBody(trades) {\n    console.log(\"Error: Empty body\");\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Divider horizontal>\n          <Header as=\"h4\">\n            {this.props.sectionIcon}\n            {this.props.sectionName}\n          </Header>\n        </Divider>\n        <Table celled striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan=\"3\">Daisy</Table.HeaderCell>\n              <Table.HeaderCell colSpan=\"3\">Tommy</Table.HeaderCell>\n              <Table.HeaderCell>&nbsp;</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          {this.createBody(\n            this.props.trades,\n            this.props.statuses,\n            this.props.queueIDs\n          )}\n        </Table>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TradeTable;\n","import React from \"react\";\nimport { Icon, Table } from \"semantic-ui-react\";\nimport TradeTable from \"./TradeTable\";\n\nclass StalkMarketTable extends TradeTable {\n  createBody(trades) {\n    return (\n      <Table.Body>\n        {trades.map((trade, index) => (\n          <Table.Row>\n            {this.createTradeRow(\"seller\", trade.seller, index)}\n            {this.createTradeRow(\"buyer\", trade.buyer, index)}\n            <Table.Cell>\n              {this.createActionButton(\n                \"join\",\n                trade,\n                <Icon name=\"angle double up\" />\n              )}\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    );\n  }\n}\n\nexport default StalkMarketTable;\n","import React, { Component } from \"react\";\nimport { Icon, Input, Divider, Header } from \"semantic-ui-react\";\n\nclass YourInformation extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Divider horizontal>\n          <Header as=\"h4\">\n            <Icon name=\"info circle\" />\n            Your Information\n          </Header>\n        </Divider>\n        <Input\n          name=\"Name\"\n          defaultValue={this.props.visitorName}\n          onChange={this.props.onInfoChanged}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default YourInformation;\n","import React from \"react\";\nimport { Icon, Table, Segment, Label, Accordion } from \"semantic-ui-react\";\nimport TradeTable from \"./TradeTable\";\n\nclass YourStalkTable extends TradeTable {\n  createStatusSegment(status) {\n    console.log(\"Creating status segment\");\n    return (\n      <Segment>\n        {status.action} - {status.data}\n      </Segment>\n    );\n  }\n\n  getStatusColor(type) {\n    switch (type) {\n      case \"islandUpdated\":\n        return \"purple\";\n      case \"queueUpdated\":\n        return \"olive\";\n      case \"alert\":\n        return \"red\";\n      default:\n        return \"grey\";\n    }\n  }\n\n  getStatusMessage(data, queueIDs) {\n    switch (data.action) {\n      case \"joined\":\n        return \"joined queue.\";\n      case \"islandUpdated\":\n        return data.data.description;\n      case \"queueUpdated\":\n        var message = \"you are not in the queue?\";\n        data.data.visitors.map((visitor) => {\n          for (let key in queueIDs) {\n            if (queueIDs[key] === visitor.$id) {\n              message = \"your place: \" + visitor.place;\n            }\n          }\n        });\n        return message;\n      case \"alert\":\n        return data.data.message;\n      default:\n        return JSON.stringify(data);\n    }\n  }\n\n  getRibbonMessage(data) {\n    if (data.data.timestamp) {\n      return new Date(data.data.timestamp * 1000).toLocaleTimeString();\n    }\n    switch (data.action) {\n      case \"queueUpdated\":\n      case \"joined\":\n        return <Icon name=\"thumbs up\" />;\n      case \"islandUpdated\":\n        return <Icon name=\"exclamation circle\" />;\n      case \"alert\":\n        return <Icon name=\"times circle\" />;\n      default:\n        return <Icon name=\"question circle\" />;\n    }\n  }\n\n  isSkippableStatus(data) {\n    switch (data.action) {\n      //   case \"joined\":\n      case \"testing\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  createAccordion(turnipCode, island, data) {\n    if (data.length > 0) {\n      let panels = [\n        {\n          key: turnipCode,\n          title: {\n            content: (\n              <Label color=\"grey\" horizontal>\n                <Icon name=\"unordered list\" />\n                {island.name + \"'s events\"}\n              </Label>\n            ),\n          },\n          content: data,\n        },\n      ];\n      return (\n        <Accordion\n          panels={panels}\n          exclusive={false}\n          defaultActiveIndex={[0]}\n          fluid\n        />\n      );\n    }\n  }\n  createStatusRows(trade, statuses, queueIDs) {\n    let sellSide = [];\n    let buySide = [];\n    if (statuses[trade.seller.turnipCode]) {\n      statuses[trade.seller.turnipCode].reverse().map((status) =>\n        !this.isSkippableStatus(status)\n          ? sellSide.push(\n              <React.Fragment>\n                <Segment color={this.getStatusColor(status.action)}>\n                  <Label color={this.getStatusColor(status.action)} ribbon>\n                    {this.getRibbonMessage(status)}\n                  </Label>\n                  {this.getStatusMessage(status, queueIDs)}\n                </Segment>\n              </React.Fragment>\n            )\n          : sellSide\n      );\n    }\n    if (statuses[trade.buyer.turnipCode]) {\n      statuses[trade.buyer.turnipCode].reverse().map((status) =>\n        !this.isSkippableStatus(status)\n          ? buySide.push(\n              <React.Fragment>\n                <Segment color={this.getStatusColor(status.action)}>\n                  <Label color={this.getStatusColor(status.action)} ribbon>\n                    {this.getRibbonMessage(status)}\n                  </Label>\n                  {this.getStatusMessage(status, queueIDs)}\n                </Segment>\n              </React.Fragment>\n            )\n          : buySide\n      );\n    }\n\n    // \"{\"action\":\"alert\",\"data\":{\"turnipCode\":\"8a2312de\",\"message\":\"Visitors of hornyland, your attention, please.<br><br> \\n\\t\\t\\t\\t\\tWe have detected this islands gates are no longer responding. I\n    // \"{\"action\":\"queueUpdated\",\"data\":{\"turnipCode\":\"f421e430\",\"timestamp\":1589230865,\"visitorCount\":1,\"visitors\":[{\"$id\":10533268,\"name\":\"Katie Bug\",\"place\":1,\"time\":4},{\"$id\":10533757,\"nam\n    // \"{\"action\":\"islandUpdated\",\"data\":{\"description\":\"there is no fee but i'm in desperate need of nmt so it would be nice if you could bring some but that's it\",\"locked\":1,\"private\":0,\"paused\n    return (\n      <Table.Row>\n        <Table.Cell colspan=\"3\" verticalAlign=\"top\">\n          {this.createAccordion(\n            trade.seller.turnipCode,\n            trade.seller,\n            sellSide\n          )}\n        </Table.Cell>\n        <Table.Cell colspan=\"3\" verticalAlign=\"top\">\n          {this.createAccordion(trade.buyer.turnipCode, trade.buyer, buySide)}\n        </Table.Cell>\n        <Table.Cell></Table.Cell>\n      </Table.Row>\n    );\n  }\n\n  createBody(trades, statuses, queueIDs) {\n    return (\n      <Table.Body>\n        {trades.map((trade, index) => (\n          <React.Fragment>\n            <Table.Row>\n              {this.createTradeRow(\"seller\", trade.seller, -1)}\n              {this.createTradeRow(\"buyer\", trade.buyer, -1)}\n              <Table.Cell>\n                {this.createActionButton(\n                  \"leave\",\n                  trade,\n                  <Icon name=\"angle double down\" />\n                )}\n                {this.createActionButton(\n                  \"grab\",\n                  trade,\n                  <Icon name=\"angle double right\" />\n                )}\n                {this.createActionButton(\n                  \"ping\",\n                  trade,\n                  <Icon name=\"angle double left\" />\n                )}\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell colspan=\"7\">Status: </Table.Cell>\n            </Table.Row>\n            {this.createStatusRows(trade, statuses, queueIDs)}\n          </React.Fragment>\n        ))}\n      </Table.Body>\n    );\n  }\n}\n\nexport default YourStalkTable;\n","class StalkUtil {\n  static sleep(ms) {\n    console.log(\"Going to sleep for \" + ms + \"ms\");\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\nexport default StalkUtil;\n","import React, { Component } from \"react\";\nimport { Icon, Container } from \"semantic-ui-react\";\nimport Cookies from \"universal-cookie\";\nimport StalkMarketTable from \"./StalkMarketTable\";\nimport YourInformation from \"./YourInformation\";\nimport YourStalkTable from \"./YourStalkTable\";\nimport StalkUtil from \"./StalkUtil\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport dingMP3 from \"../resources/ding.mp3\";\nimport waterdropMP3 from \"../resources/waterdrop2.mp3\";\nimport errorMP3 from \"../resources/computerError2.mp3\";\n// import Facilitator from \"../../../bkup/utils/facilitator\";\n\nclass TradeMainPage extends Component {\n  constructor(props) {\n    super(props);\n\n    const cookies = new Cookies();\n    this.cookies = cookies;\n    this.visitorIDs = {};\n    this.failedTrades = {};\n    if (!cookies.get(\"tradeState\")) {\n      this.state = {\n        islands: [],\n        visitorName: \"\",\n        yourPlaces: [],\n        yourTrades: [],\n        visitorIDs: {},\n        dodoCodes: {},\n        turnipQueueIDs: {},\n      };\n    } else {\n      this.state = {\n        islands: [],\n        visitorIDs: cookies.get(\"visitorIDs\"),\n        visitorName: cookies.get(\"visitorName\"),\n        yourTrades: cookies.get(\"yourTrades\"),\n        yourPlaces: cookies.get(\"yourPlaces\"),\n        turnipQueueIDs: cookies.get(\"turnipQueueIDs\"),\n        dodoCodes: {},\n      };\n      this.visitorIDs = cookies.get(\"visitorIDs\");\n    }\n    this.state.statuses = {};\n    this.handlePing = this.handlePing.bind(this);\n    this.handleJoin = this.handleJoin.bind(this);\n    this.handleInfo = this.handleInfo.bind(this);\n    this.handleYourPlaces = this.handleYourPlaces.bind(this);\n    this.handleVisitorID = this.handleVisitorID.bind(this);\n    this.handleReconnect = this.handleReconnect.bind(this);\n    this.currentButtonElement = null;\n  }\n\n  handleReconnect() {\n    for (let turnipCode in this.visitorIDs) {\n      let visitorID = this.visitorIDs[turnipCode];\n      console.log(\"Trying to reconnect: (\" + turnipCode + \") - \" + visitorID);\n      this.handleVisitorID(turnipCode, visitorID);\n    }\n  }\n\n  handleVisitorID(turnipCode, visitorID) {\n    console.log(\"handleVisitorID: \" + turnipCode);\n    let wss_url =\n      \"wss://w92pvtybp7.execute-api.us-west-2.amazonaws.com/production\";\n    const ws = new WebSocket(wss_url);\n    var self = this;\n\n    return new Promise(function (resolve, reject) {\n      ws.onopen = function (event) {\n        let data = {\n          action: \"join\",\n          turnipCode: turnipCode,\n          visitorID: visitorID, // null to create a new one.\n        };\n        ws.send(JSON.stringify(data));\n      };\n      ws.onerror = function (event) {\n        console.log(\"Error opening ws connection\");\n        console.log(event);\n        reject();\n      };\n\n      ws.onmessage = function (event) {\n        console.log(event);\n        let obj = JSON.parse(event.data);\n        if (!self.state.statuses[turnipCode]) {\n          self.state.statuses[turnipCode] = [];\n        }\n        self.state.statuses[turnipCode].push({\n          action: obj.action,\n          data: obj.data,\n        });\n\n        self.setState({\n          statuses: self.state.statuses,\n        });\n        console.log(\"Status Updated:\");\n        console.log(self.state.statuses);\n        switch (obj.action) {\n          case \"joined\":\n            if (obj.data.visitorID !== undefined) {\n              self.state.visitorID = obj.data.visitorID;\n              console.log(\n                \"VisitorID obtained for (\" +\n                  turnipCode +\n                  \"): \" +\n                  self.state.visitorID\n              );\n\n              self.visitorIDs[turnipCode] = obj.data.visitorID;\n              self.autoSave();\n            }\n            break;\n          case \"queueUpdated\":\n            break;\n          default:\n            console.log(\"Unknown wss action: \" + obj.action);\n        }\n        console.log(\"done handling ws\");\n        resolve();\n      };\n    });\n  }\n\n  handleYourPlaces(action, data, turnipCode) {\n    switch (action) {\n      case \"update\":\n        if (data[\"yourPlace\"]) {\n          // this condition is only for playing the sound.\n          // if (this.state.yourPlaces[turnipCode] !== data.yourPlace) {\n          //   // this.waterdrop.audioEl.current.play();\n          //   console.log(\"Do you still need this code path?\");\n          // }\n          // Investigation: why is this failing?\n          // this.state.yourPlaces[turnipCode] = data.yourPlace;\n        }\n        break;\n      case \"remove\":\n        if (this.state.yourPlaces[turnipCode]) {\n          delete this.state.yourPlaces[turnipCode];\n        }\n        break;\n      default:\n        console.log(\"unknown your places' action type\");\n        break;\n    }\n    this.autoSave();\n  }\n\n  handleJoin(side, turnipCode, data) {\n    console.log(\"Join: \" + side);\n    console.log(data);\n    if (side === \"sell\") {\n    } else if (side === \"buy\") {\n    }\n\n    if (!data.success) {\n      // that means we couldn't join for some reasons.\n      this.failedTrades[turnipCode] = data.message;\n    } else {\n      // add to $id table\n      // console.log(\"Missing Impl: Should build data.$id-turnipCode map\");\n      // turnipIDMap[turnipCode] = data.$id\n      let mapping =\n        this.state.turnipQueueIDs && this.state.turnipQueueIDs !== \"undefined\"\n          ? this.state.turnipQueueIDs\n          : {};\n      mapping[turnipCode] = data.$id;\n      console.log(\"Obtained IDs\");\n      console.log(mapping);\n      this.setState({\n        turnipQueueIDs: mapping,\n      });\n      // this.state.turnipQueueIDs[turnipCode] = data.$id;\n    }\n\n    // if (type === \"leave\") {\n    //   this.handleYourPlaces(\"remove\", null, turnipCode);\n    // }\n  }\n\n  handleGrab() {\n    // {success: true, message: \"Grabbed code!\", dodoCode: \"6Y81G\"}\n    // {success: true, grabbed: false}\n  }\n\n  handlePing(side, turnipCode, data) {\n    console.log(\"Ping: \" + side);\n    console.log(data);\n    if (side === \"sell\") {\n    } else if (side === \"buy\") {\n    }\n    if (!data.yourPlace && data.onIsland) {\n      console.log(\"Uh-oh: you've lost your place \" + side + \":\" + turnipCode);\n      data.yourPlace = \"-1\";\n    }\n\n    this.handleYourPlaces(\"update\", data, turnipCode);\n    console.log(this.state.yourPlaces);\n    // do you want to differentiate by data?\n    // grab has dodoCode (ping might have it too)\n    //\n    if (data.success) {\n      // data.dodoCode should appear in both pinging and grabbing.\n      if (data.dodoCode) {\n        // play the ding.\n        // this.ding.audioEl.current.play();\n        this.state.dodoCodes[turnipCode] = data.dodoCode;\n        this.playSound(\"ding\");\n      } else {\n        console.log(\"no dodocode\");\n      }\n    }\n  }\n\n  handleFetch(url, side, turnipCode, callback) {\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => callback(side, turnipCode, data));\n  }\n\n  async handleQueue(actionType, sellerTurnipCode, buyerTurnipCode) {\n    console.log(\"handleFetch\");\n    var callBack = this.handleJoin;\n    var sleepCount = 3000;\n    if (actionType === \"grab\" || actionType === \"ping\") {\n      callBack = this.handlePing;\n      sleepCount = 0;\n    }\n    if (sellerTurnipCode) {\n      let seller_url =\n        \"/queue/action/\" +\n        actionType +\n        \"/turnipCode/\" +\n        sellerTurnipCode +\n        \"/visitorID/\" +\n        this.visitorIDs[sellerTurnipCode] +\n        \"/visitorName/\" +\n        this.state.visitorName;\n      console.log(\"Fetch: \" + seller_url);\n      this.handleFetch(seller_url, \"sell\", sellerTurnipCode, callBack);\n    }\n\n    if (actionType === \"join\") {\n      await StalkUtil.sleep(sleepCount);\n    }\n\n    if (buyerTurnipCode) {\n      let buyer_url =\n        \"/queue/action/\" +\n        actionType +\n        \"/turnipCode/\" +\n        buyerTurnipCode +\n        \"/visitorID/\" +\n        this.visitorIDs[buyerTurnipCode] +\n        \"/visitorName/\" +\n        this.state.visitorName;\n      console.log(\"Fetch: \" + buyer_url);\n      this.handleFetch(buyer_url, \"buy\", buyerTurnipCode, callBack);\n    }\n\n    if (actionType === \"join\" || actionType === \"leave\") {\n      this.setTrades(actionType, sellerTurnipCode, buyerTurnipCode);\n    } else {\n      this.getTrades();\n    }\n  }\n\n  async handleClick(element, type, sellerTurnipCode, buyerTurnipCode) {\n    console.log(type + \":\" + sellerTurnipCode + \":\" + buyerTurnipCode);\n    this.currentButtonElement = element;\n    if (type === \"join\") {\n      this.playSound(\"waterdrop\");\n      if (!this.state.statues) {\n        this.state.status = {};\n      }\n      if (!this.state.statuses[sellerTurnipCode]) {\n        this.state.statuses[sellerTurnipCode] = [\n          {\n            action: \"testing\",\n            data: \"ABCD\",\n          },\n        ];\n      }\n      if (!this.state.statuses[buyerTurnipCode]) {\n        this.state.statuses[buyerTurnipCode] = [\n          {\n            action: \"testing\",\n            data: \"ABCD\",\n          },\n        ];\n      }\n\n      console.log(\"Generating visitorID\");\n      await this.handleVisitorID(sellerTurnipCode, null);\n      console.log(\"Generating visitorID\");\n      await this.handleVisitorID(buyerTurnipCode, null);\n    }\n    this.handleQueue(type, sellerTurnipCode, buyerTurnipCode);\n  }\n\n  setTrades(type, sellerTurnipCode, buyerTurnipCode) {\n    // could have used index, but the table gets updated dynamically\n    // so might need to discrepancies\n    // giving up on performance.\n    if (type === \"join\") {\n      let sellerIsland;\n      let buyerIsland;\n      this.state.islands.map((island) => {\n        if (island.seller.turnipCode === sellerTurnipCode) {\n          sellerIsland = island.seller;\n        }\n        if (island.buyer.turnipCode === buyerTurnipCode) {\n          buyerIsland = island.buyer;\n        }\n      });\n\n      if (\n        this.failedTrades[sellerIsland.turnipCode] ||\n        this.failedTrades[buyerIsland.turnipCode]\n      ) {\n        // play error\n        // notify\n        // this.errorSound.audioEl.current.play();\n        // this.notify(\n        //   \"❌ Unable to join the queues: \" +\n        //     this.failedTrades[sellerIsland.turnipCode]\n        //     ? \"(\" +\n        //         sellerIsland.name +\n        //         \")\" +\n        //         this.failedTrades[sellerIsland.turnipCode]\n        //     : \"\" + this.failedTrades[buyerIsland.turnipCode]\n        //     ? \"(\" +\n        //       buyerIsland.name +\n        //       \")\" +\n        //       this.failedTrades[buyerIsland.turnipCode]\n        //     : \"\"\n        // );\n        console.log(\n          \"Unable to add trade: \" +\n            sellerIsland.turnipCode +\n            \" - \" +\n            buyerIsland.turnipCode\n        );\n      } else {\n        // all good!\n        this.state.yourTrades.push({\n          seller: sellerIsland,\n          buyer: buyerIsland,\n        });\n      }\n    } else if (type === \"leave\") {\n      let rId = -1;\n      this.state.yourTrades.map((island, index) => {\n        if (\n          island.seller.turnipCode === sellerTurnipCode &&\n          island.buyer.turnipCode === buyerTurnipCode\n        ) {\n          rId = index;\n        }\n      });\n      if (rId > -1) {\n        console.log(\"Removing your trades: \" + rId);\n        this.state.yourTrades.splice(rId, 1);\n      }\n      console.log(\"Removing visitorIDs\");\n      if (this.visitorIDs) {\n        delete this.visitorIDs[sellerTurnipCode];\n        delete this.visitorIDs[buyerTurnipCode];\n      }\n\n      console.log(\"Removing turnipQueueIDs\");\n      if (this.state.turnipQueueIDs) {\n        delete this.state.turnipQueueIDs[sellerTurnipCode];\n        delete this.state.turnipQueueIDs[buyerTurnipCode];\n      }\n    }\n    this.setState({\n      yourTrades: this.state.yourTrades,\n    });\n    this.autoSave();\n    this.currentButtonElement.toggleLoading();\n  }\n\n  notify(message) {\n    // toaster.notify(message, {\n    //   duration: 2000,\n    // });\n  }\n\n  playSound(type) {\n    var audioEl = document.getElementsByClassName(\"audio-element-error\")[0];\n    switch (type) {\n      case \"ding\":\n        audioEl = document.getElementsByClassName(\"audio-element-ding\")[0];\n        break;\n      case \"waterdrop\":\n        audioEl = document.getElementsByClassName(\"audio-element-waterdrop\")[0];\n        break;\n      default:\n    }\n    audioEl.play();\n    // console.log(\"playSound\");\n    // this.alertSound.audioEl.current.src = dingMP3;\n    // this.alertSound.audioEl.current.play();\n  }\n\n  getTradesServer() {\n    fetch(\"/getTrades\")\n      // fetch(\"/getTradesTest\")\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return res.json();\n      })\n      .then((islands) => {\n        this.setState({\n          islands: islands,\n          visitorName: this.state.visitorName,\n          visitorIDs: this.visitorIDs,\n        });\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  }\n\n  // async getTradesDirect() {\n  //   let islands = await Facilitator.getTrades();\n  //   this.setState({\n  //     islands: islands,\n  //     visitorName: this.state.visitorName,\n  //     visitorIDs: this.visitorIDs,\n  //   });\n  // }\n  getTrades() {\n    this.prevState = this.state;\n    console.log(\"consolidating trades...\");\n    this.notify();\n    this.getTradesServer();\n    // this.getTradesDirect();\n  }\n\n  autoSave() {\n    console.log(\"auto-saving trade states\");\n    this.cookies.set(\"tradeState\", \"activated\", { path: \"/\" });\n    this.cookies.set(\"visitorIDs\", this.visitorIDs, {\n      path: \"/\",\n    });\n    this.cookies.set(\"visitorName\", this.state.visitorName, { path: \"/\" });\n    // this.cookies.set(\"yourPlaces\", this.state.yourPlaces, { path: \"/\" });\n    this.cookies.set(\"yourTrades\", this.state.yourTrades, { path: \"/\" });\n    this.cookies.set(\"turnipQueueIDs\", this.state.turnipQueueIDs, {\n      path: \"/\",\n    });\n    console.log(\"New values: \");\n    console.log(this.cookies.cookies);\n  }\n\n  autoPing() {\n    console.log(\"auto ping\");\n    this.state.yourTrades.map((trade) => {\n      this.handleQueue(\"ping\", trade.seller.turnipCode, null);\n      this.handleQueue(\"ping\", null, trade.buyer.turnipCode);\n      this.handleQueue(\"grab\", trade.seller.turnipCode, null);\n      this.handleQueue(\"grab\", null, trade.buyer.turnipCode);\n\n      // debug only.\n      // this.state.dodoCodes[trade.seller.turnipCode] = Math.floor(\n      //   Math.random() * 1000\n      // );\n      // this.state.dodoCodes[trade.buyer.turnipCode] = Math.floor(\n      //   Math.random() * 1000\n      // );\n    });\n  }\n\n  autoRefresh() {\n    var self = this;\n    setInterval(function () {\n      self.getTrades();\n      self.autoSave();\n      self.autoPing();\n    }, 30000);\n  }\n\n  componentDidMount() {\n    this.handleReconnect();\n    this.getTrades();\n    this.autoRefresh();\n  }\n\n  handleInfo(event) {\n    switch (event.target.name) {\n      case \"Name\":\n        this.state.visitorName = event.target.value;\n        break;\n      default:\n        console.log(\"Warning: unknown event + \" + event.target.name);\n        break;\n    }\n    this.autoSave();\n  }\n\n  handleClear(event) {\n    console.log(\"Clearing visitorID\");\n    this.state.visitorIDs = {};\n    this.autoSave();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container>\n          {/* <ReactAudioPlayer\n            src={dingMP3}\n            ref={(element) => {\n              this.ding = element;\n            }}\n          />\n          <ReactAudioPlayer\n            src={waterdropMP3}\n            ref={(element) => {\n              this.waterdrop = element;\n            }}\n          />\n          <ReactAudioPlayer\n            src={errorMP3}\n            ref={(element) => {\n              this.errorSound = element;\n            }}\n          /> */}\n          <ReactAudioPlayer\n            ref={(element) => {\n              this.alertSound = element;\n            }}\n          />\n\n          <YourInformation\n            visitorName={this.state.visitorName}\n            onInfoChanged={this.handleInfo.bind(this)}\n          />\n          <YourStalkTable\n            trades={this.state.yourTrades}\n            yourPlaces={this.state.yourPlaces}\n            dodoCodes={this.state.dodoCodes}\n            statuses={this.state.statuses}\n            queueIDs={this.state.turnipQueueIDs}\n            sectionName=\"Your Stalks\"\n            sectionIcon={<Icon name=\"dolly\" />}\n            onHandleClick={this.handleClick.bind(this)}\n          />\n          <StalkMarketTable\n            trades={this.state.islands}\n            queueIDs={this.state.turnipQueueIDs}\n            onHandleClick={this.handleClick.bind(this)}\n            sectionName=\"Stalk Market\"\n            sectionIcon={<Icon name=\"money bill alternate\" />}\n          />\n          {\n            // below is ugly, to be refactored\n          }\n          <div>\n            <audio className=\"audio-element-ding\">\n              <source src={dingMP3}></source>\n            </audio>\n          </div>\n          <div>\n            <audio className=\"audio-element-error\">\n              <source src={errorMP3}></source>\n            </audio>\n          </div>\n          <div>\n            <audio className=\"audio-element-waterdrop\">\n              <source src={waterdropMP3}></source>\n            </audio>\n          </div>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TradeMainPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport TradeMainPage from \"./components/TradeMainPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <TradeMainPage />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Semantic-UI stylesheets\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href =\n  \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}